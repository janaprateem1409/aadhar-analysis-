import java.io.IOException;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.log4j.Logger;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.io.WritableComparator;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

public class aadhar_card
{
    public class Num_Mapper extends Mapper<LongWritable, Text, Text, IntWritable> {

	Text state = new Text();
	IntWritable count = new IntWritable();
	private static final Logger LOG = Logger.getLogger(Num_Mapper.class);

	public void map(LongWritable key, Text value, Context context)
			throws IOException, InterruptedException {
		String[] list = value.toString().split(",");

		if (key.get() != 0) {
			state.set(list[2]);
			count.set(Integer.parseInt(list[8]));
			LOG.info("Reading line: " + state + "Aadhaars generated: "
					+ list[8]);
			context.write(state, count);
		}
		LOG.info("Skipped line with key:" + key.get());
	}

}

public class Num_Reducer extends
		Reducer<Text, IntWritable, Text, IntWritable> {

	public void reduce(Text key, Iterable<IntWritable> values, Context context)
			throws IOException, InterruptedException {
		int sum = 0;
		for (IntWritable count : values) {
			sum += count.get();
		}

		context.write(key, new IntWritable(sum));
	}
}

public class Sort_Mapper extends Mapper<LongWritable, Text, IntWritable, Text> {

	Text state = new Text();
	IntWritable count = new IntWritable();

	public void map(LongWritable key, Text value, Context context)
			throws IOException, InterruptedException {
		String[] splits = value.toString().split("\\|");

		state.set(splits[0].trim());
		count.set(Integer.parseInt(splits[1].trim()));

		context.write(count, state);
	}
}

public class Sort_Reducer extends Reducer<IntWritable, Text, Text, IntWritable> {

	public void reduce(IntWritable key, Iterable<Text> values, Context context)
			throws IOException, InterruptedException {
		for (Text val : values) {

			context.write(val, key);
		}
	}
}

public class Sort_Comparator extends WritableComparator {
	
	@Override
	public int compare(WritableComparable k1, WritableComparable k2) {
		IntWritable v1 = (IntWritable) k1;
		IntWritable v2 = (IntWritable) k2;
		
		return v1.get() < v2.get() ? 1 : v1.get() == v2.get() ? 0 : -1; 
		
	}

	protected Sort_Comparator() {
        super(IntWritable.class, true);
    }
}

public class Driver extends Configured implements Tool {

	@Override
	public int run(String[] args) throws Exception {

		if (args.length != 3) {
			System.out.println("Usage: [input] [output1] [output2]");
			System.exit(-1);
		}
		Job stateWiseCount = Job.getInstance(getConf());
		stateWiseCount.setJobName("Aadhaar Data Analysis");
		stateWiseCount.setJarByClass(Driver.class);

		/* Field separator for reducer output*/
		stateWiseCount.getConfiguration().set("mapreduce.output.textoutputformat.separator", " | ");
		
		stateWiseCount.setMapperClass(Num_Mapper.class);
		stateWiseCount.setReducerClass(Num_Reducer.class);

		stateWiseCount.setInputFormatClass(TextInputFormat.class);
		stateWiseCount.setMapOutputKeyClass(Text.class);
		stateWiseCount.setMapOutputValueClass(IntWritable.class);

		stateWiseCount.setOutputKeyClass(Text.class);
		stateWiseCount.setOutputValueClass(IntWritable.class);

		Path inputFilePath = new Path(args[0]);
		Path outputFilePath = new Path(args[1]);

		FileInputFormat.addInputPath(stateWiseCount, inputFilePath);
		FileOutputFormat.setOutputPath(stateWiseCount, outputFilePath);

		FileSystem fs = FileSystem.newInstance(getConf());

		if (fs.exists(outputFilePath)) {
			fs.delete(outputFilePath, true);
		}

		stateWiseCount.waitForCompletion(true);
		

		Job sort = Job.getInstance(getConf());
		sort.setJobName("Sorting States on Num Aadhaars generated");
		sort.setJarByClass(Driver.class);		
		
		sort.setOutputKeyClass(Text.class);
		sort.setOutputValueClass(IntWritable.class);

		sort.setMapperClass(Sort_Mapper.class);
		sort.setReducerClass(Sort_Reducer.class);
		sort.setSortComparatorClass(Sort_Comparator.class);
		
		sort.setMapOutputKeyClass(IntWritable.class);
		sort.setMapOutputValueClass(Text.class);
		
		FileInputFormat.addInputPath(sort, new Path(args[1]));
		FileOutputFormat.setOutputPath(sort, new Path(args[2]));

		if (fs.exists(new Path(args[2]))) {
			fs.delete(new Path(args[2]), true);
		}
		
		return sort.waitForCompletion(true) ? 0 : 1;

	}

	public static void main(String[] args) throws Exception {
		ToolRunner.run(new Driver(), args);
	}

}





}
